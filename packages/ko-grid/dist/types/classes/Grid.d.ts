/// <reference types="jquery" />
/// <reference types="jqueryui" />
import ko from 'knockout';
import { GridEventType } from '../constants';
import { SizeStyle } from '../styleProvider';
import { Entity, GridRow, PropertyBag } from '../types';
import { AggregationService } from './AggregationService';
import Column from './Column';
import { AggregationResult } from './DefaultAggregationProvider';
import Dimension from './Dimension';
import EventProvider from './EventProvider';
import { GridConfig, GridEventHandler, GridEventMap, GridOptions, GridSettings, PagingOptions } from './grid-config';
import RowFactory from './RowFactory';
import SearchProvider from './SearchProvider';
import SelectionService from './SelectionService';
export default class Grid {
    private constructor();
    readonly $canvas: JQuery;
    readonly $fixedCanvas: JQuery;
    readonly $fixedHeaderContainer: JQuery;
    readonly $fixedHeaderScroller: JQuery;
    readonly $fixedViewport: JQuery;
    readonly $groupPanel: JQuery;
    readonly $headerContainer: JQuery;
    readonly $headerScroller: JQuery;
    readonly $root: JQuery;
    readonly $topPanel: JQuery;
    readonly $viewport: JQuery;
    readonly $userViewModel: PropertyBag;
    readonly cantPageBackward: ko.PureComputed<boolean>;
    readonly cantPageForward: ko.PureComputed<boolean>;
    readonly canvasStyle: ko.PureComputed<SizeStyle>;
    readonly columns: ko.ObservableArray<Column>;
    readonly config: GridConfig;
    readonly configGroups: ko.ObservableArray<Column>;
    readonly aggregateResults: ko.ObservableArray<AggregationResult>;
    readonly aggregationService: AggregationService;
    readonly disableTextSelection: boolean;
    readonly enableGrouping: boolean;
    readonly enablePaging: boolean;
    readonly filteredData: ko.ObservableArray<Entity>;
    readonly filterText: ko.Observable<string>;
    readonly fixedHeaderRowTemplate: string;
    readonly fixedHeaderStyle: ko.PureComputed<SizeStyle>;
    readonly fixedRowTemplate: string;
    readonly fixedViewportDimWidth: ko.PureComputed<number>;
    readonly fixedViewportStyle: ko.PureComputed<SizeStyle>;
    readonly footerStyle: ko.PureComputed<SizeStyle>;
    readonly footerVisible: boolean;
    readonly gridId: string;
    readonly groupPanelStyle: ko.PureComputed<SizeStyle>;
    readonly groupPanelText: ko.PureComputed<string>;
    readonly groupRowTemplate: string;
    readonly headerRowTemplate: string;
    readonly headerScrollerStyle: ko.PureComputed<SizeStyle>;
    readonly headerStyle: ko.PureComputed<SizeStyle>;
    readonly hoveredEntity: ko.Observable<Entity | undefined>;
    readonly isDraggingOverGroups: ko.Observable<boolean>;
    readonly jqueryUITheme: boolean;
    readonly legacyMode: boolean;
    readonly maxCanvasHt: ko.Observable<number>;
    readonly maxRows: ko.PureComputed<number>;
    readonly multiSelect: boolean;
    readonly nonGroupColumns: ko.PureComputed<Readonly<Column[]>>;
    readonly pagingOptions: PagingOptions;
    readonly renderedRows: ko.ObservableArray<Readonly<GridRow>>;
    readonly rootDim: Dimension;
    readonly rowFactory: RowFactory;
    readonly rowHeight: number;
    readonly rowTemplate: string;
    readonly searchProvider: SearchProvider;
    readonly selectedItemCount: ko.PureComputed<number>;
    readonly selectedItems: ko.ObservableArray<Entity>;
    readonly selectionService: SelectionService;
    readonly showColumnMenu: boolean;
    readonly showFilter: boolean;
    readonly showMenu: ko.Observable<boolean>;
    readonly sortedData: ko.ObservableArray<Entity>;
    readonly topPanelHeight: number;
    readonly topPanelStyle: ko.PureComputed<SizeStyle>;
    readonly totalFilteredItemsLength: ko.PureComputed<number>;
    readonly viewportDimHeight: ko.PureComputed<number>;
    readonly viewportDimWidth: ko.PureComputed<number>;
    readonly viewportPanelStyle: ko.PureComputed<SizeStyle>;
    readonly viewportStyle: ko.PureComputed<SizeStyle>;
    readonly visibleFixedColumns: ko.PureComputed<Readonly<Column[]>>;
    readonly visibleNonFixedColumns: ko.PureComputed<Readonly<Column[]>>;
    eventProvider?: EventProvider;
    styleSheet: HTMLStyleElement | undefined;
    private readonly ensureCanGroupData;
    private readonly maintainColumnRatios;
    private readonly maxPages;
    private readonly messageBus;
    private readonly sortInfos;
    private hasRatioColumn;
    private prevScrollIndex;
    private prevScrollTop;
    static init(options: GridOptions): Grid;
    adjustScrollLeft(scrollLeft: number): void;
    adjustScrollTop(scrollTop: number, force?: boolean): void;
    adjustFixedViewportScrollTop(): void;
    groupColOffset(): number;
    private buildColumns;
    configureColumnWidths(): void;
    fixColumnIndexes(): void;
    fixGroupIndexes(): void;
    groupBy(col: Column, groupIndex?: number): void;
    isHoveredEntity(entity: Entity): boolean;
    minRowsToRender(): number;
    off(gridEventType: GridEventType, handler: GridEventHandler<any>): void;
    on<T extends keyof GridEventMap>(gridEventType: T, handler: GridEventHandler<GridEventMap[T]>): void;
    overrideSettings(gridSettings: GridSettings, shouldTriggerEvent: boolean): void;
    pageBackward(): void;
    pageForward(): void;
    pageToFirst(): void;
    pageToLast(): void;
    refreshDomSizes(rootDim?: {
        width: number;
        height: number;
    }): void;
    removeGroup(index: number): void;
    settings(): GridSettings;
    shouldMaintainColumnRatios(): boolean;
    toggleGroup(col: Column): void;
    toggleShowMenu(): void;
    trigger<T extends keyof GridEventMap>(gridEventType: T, data: GridEventMap[T]): void;
    private calcMaxCanvasHeight;
    private executeSorting;
    private onConfigGroupsChanged;
    private onFilteredDataChanged;
    private onSortInfosChanged;
    private overrideColumnDefs;
    private overrideGroupInfos;
    private overrideSortInfos;
    private readCantPageBackward;
    private readCantPageForward;
    private readGroupPanelText;
    private readMaxPages;
    private readMaxRows;
    private readNonGroupColumns;
    private readSelectedItemCount;
    private readTotalFilteredItemsLength;
    private readViewportDimHeight;
    private readViewportDimWidth;
    private readVisibleFixedColumns;
    private readVisibleNonFixedColumns;
    totalFixedRowWidth(): number;
    totalNonFixedRowWidth(): number;
    private resizeOnData;
    private sortData;
}
